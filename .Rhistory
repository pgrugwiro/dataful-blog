ggtitle('Rental Duration for Top 5 Stations')
famous_stations %>%
ggplot(aes(Duration, StartStation.Name, group = StartStation.Name)) +
geom_density_ridges(fill = 'brown', alpha = 0.666) +
xlim(0, 5000) +
theme_set(theme_minimal())+
xlab('Bike Rental Duration (seconds)') +
ylab("") +
famous_stations %>%
ggplot(aes(Duration, StartStation.Name, group = StartStation.Name)) +
geom_density_ridges(fill = 'brown', alpha = 0.666) +
xlim(0, 5000) +
theme_set(theme_minimal())+
xlab('Bike Rental Duration (seconds)') +
ylab("") +
famous_stations %>%
ggplot(aes(Duration, StartStation.Name, group = StartStation.Name)) +
geom_density_ridges(fill = 'brown', alpha = 0.666) +
xlim(0, 5000) +
theme_set(theme_minimal())+
xlab('Bike Rental Duration (seconds)') +
ylab("")
famous_stations %>%
ggplot(aes(Duration, StartStation.Name, group = StartStation.Name)) +
geom_density_ridges(fill = 'brown', alpha = 0.888) +
xlim(0, 5000) +
theme_set(theme_minimal())+
xlab('Bike Rental Duration (seconds)') +
ylab("")
famous_stations %>%
ggplot(aes(Duration, StartStation.Name, group = StartStation.Name)) +
geom_density_ridges(fill = 'brown', alpha = 0.777) +
xlim(0, 5000) +
theme_set(theme_minimal())+
xlab('Bike Rental Duration (seconds)') +
ylab("")
library(here)
source(here::here("rmd_config.R"))
library(here)
source(here::here("rmd_config.R"))
library(here)
source(here::here("rmd_config.R"))
library(here)
source(here::here("rmd_config.R"))
library(here)
source(here::here("rmd_config.R"))
library(here)
source(here::here("rmd_config.R"))
library(here)
source(here::here("rmd_config.R"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(tree)
library(gridExtra)
#Import data and look at the rentals distribution:
joint_df <- read.csv('~/london_cycling/Scraping and Cleaning/joint_df.csv')
joint_df %>%
ggplot(aes(log(Rentals.Num)))+
geom_histogram(fill = 'brown4', alpha = .666)
#Filter data to remove severe outliers
joint_df <- joint_df %>%
filter(Rentals.Num < 1500)
#Quick look at the data:
summary(joint_df)
joint_df %>%
ggplot(aes(log(Rentals.Num)))+
geom_histogram(fill = 'brown4', alpha = .666)
head(joint_df)
#Generate a tree for the target variable:
tree_mod <- tree(Rentals.Num ~ Temperature + Relative.Temperature + Wind +
Rel..humidity + Dew.Point + Pressure, data = joint_df)
plot(tree_mod)
text(tree_mod)
#Quick look at temperature alone (aggregate temp)
joint_df %>%
select(Temperature, Rentals.Num) %>%
group_by(Temperature) %>% summarise(Tot_Rent = sum(Rentals.Num)) %>%
ggplot(aes(Temperature, Tot_Rent)) +
geom_point() +
geom_smooth(method = 'loess') +
ylab('Total Rentals')
#Remove non-numeric and correlated variables and make a pairs plot:
joint_df %>%
select(-Time, -Description, -Relative.Temperature, -Dew.Point) %>%
pairs()
##################
#Creating models#
##################
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(y = joint_df$Temperature,
times = 1, p = 0.25, list = FALSE)
#Training and Testing sets:
train_set <- joint_df %>% slice(-test_index)
test_set <- joint_df %>% slice(test_index)
#####
#Linear Model:
fit_lm <- train(Rentals.Num ~ Temperature + Wind +
Rel..humidity, method = 'lm',
data = train_set)
predict_lm <- predict(fit_lm, test_set)
cor.test(test_set$Rentals.Num, predict_lm)
a <- ggplot(test_set, aes(Rentals.Num, predict_lm)) +
geom_point() +
geom_smooth(method = 'lm', col = 'brown')+
xlab('') +
ylab('Predicted Rentals')+
ggtitle('Linear Model')+
theme(plot.title = element_text(size = 8))
#KNN model:
fit_knn <- train(Rentals.Num ~ Temperature + Wind +
Rel..humidity + Pressure, method = 'knn',
tuneGrid = data.frame(k = 20),
data = train_set)
predict_knn <- predict(fit_knn, test_set)
cor.test(test_set$Rentals.Num, predict_knn)
b <- ggplot(test_set, aes(Rentals.Num, predict_knn)) +
geom_point() +
geom_smooth(method = 'lm', col = 'brown')+
xlab('') +
ylab('')+
ggtitle('KNN')+
theme(plot.title = element_text(size = 8))
#Decision Trees:
fit_rpart <- train(Rentals.Num ~ Temperature + Wind +
Rel..humidity + Pressure, method = 'rpart',
tuneGrid = data.frame(cp = 0.001),
data = train_set)
predict_rpart <- predict(fit_rpart, test_set)
cor.test(test_set$Rentals.Num, predict_rpart)
c <- ggplot(test_set, aes(Rentals.Num, predict_rpart)) +
geom_point() +
geom_smooth(method = 'lm', col = 'brown')+
xlab('Actual Rentals') +
ylab('Predicted Rentals') +
ggtitle('Decision Trees')+
theme(plot.title = element_text(size = 8))
#Pick random weather parameters to predict:
predict_values <- data.frame(Temperature = 5, Wind = 6,
Rel..humidity = .76, Pressure = 1019)
#Predict using one of the models:
predict(fit_knn, predict_values)
rnorm(20)
x = rnorm(20)
sd(x)
mean(x)
rnorm(100)
x <- rnorm(100)
mean(x)
sd(x)
x <- rnorm(1000)
mean(x)
sd(x)
qnorm(.95)
sample <- read.csv("C:\Users\philg\Downloads\sample.csv")
sample <- read.csv("C:/Users/philg/Downloads/sample.csv")
View(sample)
View(sample)
View(sample)
View(sample)
str(sample)
mod_1 <- lm(hon, data = sample)
mod_1 <- lm(hon~., data = sample)
table(sample$hon)
View(mod_1)
mod_1 <- lm(sample$hon)
mod_1 <- lm(hon~hon, data = sample)
summary(mod_1)
mod_1 <- glm(hon~hon, data = sample)
table(sample$hon)
summary(mod_1)
exp(coef(mod_1))
mod_1 <- glm(hon~1, data = sample)
summary(mod_1)
mod_1 <- lm(hon~1, data = sample)
summary(mod_1)
log(.245)
log(.3245)
mod_1 <- glm(hon~1, data = sample, family = "binomial")
summary(mod_1)
mod_2 <- glm(hon~female, data = sample, family = "binomial")
summary(mod_2)
table(sample$hon, sample$female)
exp(coef(mod_2))
exp(.15634)
mod_3 <- glm(hon~math+female+read, data = sample, family = 'binomial')
summary(mod_3)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
data("ChickenFeed")
data("ChickWeight")
force(ChickWeight)
?ChickWeight
data("ChickWeight")
str(ChickWeight)
table(ChickWeight$Diet, ChickWeight$Chick)
table(ChickWeight$Chick)
summary(ChickWeight)
head(ChickWeight) %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial") %>%
kable_styling(latex_options = "scale_down")
# Installing and loading libraries that will be used in this analysis
packages = c("kableExtra","lubridate", "gridExtra", "tree", "tidyverse", "here", "caret")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
head(ChickWeight) %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial") %>%
kable_styling(latex_options = "scale_down")
head(ChickWeight) %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial") %>%
kable_styling(latex_options = "scale_down")
ChickWeight %>%
ggplot(aes(Time, weight)) %>%
geom_point()
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point()
ChickWeight %>%
ggplot(aes(Time, weight, col=Diet)) +
geom_point()
ChickWeight %>%
ggplot(aes(Time, weight, col=Chick)) +
geom_point()
ChickWeight %>%
ggplot(aes(Time, weight, col=Chick)) +
geom_line()
ChickWeight %>%
ggplot(aes(Time, weight), col=Chick) +
geom_line()
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_line()
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_line(col=Chick)
ChickWeight %>%
ggplot(aes(Diet, weight)) +
geom_boxplot()
ChickWeight %>%
ggplot(aes(Diet, weight)) +
geom_boxplot(fill='brown4')
ChickWeight %>%
ggplot(aes(Diet, weight)) +
geom_boxplot(fill='brown4', alpha = .666)
ChickWeight %>%
filter(Chick == '1' | Chick == '2') %>%
ggplot(aes(Time, weight)) +
geom_point()
ChickWeight %>%
filter(Chick == '1' | Chick == '2') %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point()
ChickWeight %>%
filter(Chick == '1' | Chick == '20') %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point()
ChickWeight %>%
filter(Chick == '1' | Chick == '24') %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point()
ancova <- lm(weight ~ Time*Diet, data = ChickWeight)
summary(ancova)
ancova <- lm(weight ~ Time+Diet, data = ChickWeight)
summary(ancova)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point()
summary(aov(weight~Diet, data = ChickWeight))
ancova_model <- lm(weight ~ Time+Diet, data = ChickWeight)
summary(ancova_model)
plot(ancova_model)
mod2 <- step(ancova_model)
mod2 <- step(ancova_model)
summary(mod2)
plot(mod2)
16.1661 + 10.9244
36.4994 + 10.9244
30.2335 + 10.9244
abline(10.9244, 8.7505)
ChickWeight %>%
ggplot(aes(weight, Time)) +
geom_point() +
geom_abline(10.9244, 8.7505)
ChickWeight %>%
ggplot(aes(weight, Time)) +
geom_point()
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point()
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point()
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point() +
geom_abline()
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point() +
geom_abline(10, 8)
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point(slope = 8, intercept = 10) +
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point() +
geom_abline(slope = 8, intercept = 10)
ChickWeight %>%
ggplot(aes(Time, weight)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244) +
geom_abline(slope = 8.7505, intercept = 27.0905) +
geom_abline(slope = 8.7505, intercept = 47.4238) +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244) +
geom_abline(slope = 8.7505, intercept = 27.0905) +
geom_abline(slope = 8.7505, intercept = 47.4238) +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905) +
geom_abline(slope = 8.7505, intercept = 47.4238) +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "green") +
geom_abline(slope = 8.7505, intercept = 47.4238) +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238) +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "lightblue") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "blue") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "aqua") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "aquablue") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "skyblue") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "lightblue") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "red") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "cyan3") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "brown") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "cyan3") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "brown1") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "cyan3") +
geom_abline(slope = 8.7505, intercept = 41.1579)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "brown1") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "cyan3") +
geom_abline(slope = 8.7505, intercept = 41.1579, col = "blueviolet")
new_chick <- c(Time = 13, Diet = '3')
ibiro <- predict(ancova_model, new_chick)
new_chick <- c(Time = 13, Diet == '3')
new_chick <- c(Time = 13, Diet = 3)
ibiro <- predict(ancova_model, new_chick)
ibiro <- predict(ancova_model, new_chick)
new_chick <- as.data.frame(Time = 13, Diet = 3)
new_chick <- data.frame(Time = 13, Diet = 3)
ibiro <- predict(ancova_model, new_chick)
new_chick <- data.frame(Time = 13, Diet = '3')
ibiro <- predict(ancova_model, new_chick)
predict(ancova_model, new_chick)
ChickWeight[ChickWeight$Time == 12]
ChickWeight[ChickWeight$Time == 12,]
mean(ChickWeight[ChickWeight$Time == 12,]$weight)
new_chick <- data.frame(Time = 12, Diet = '3')
predict(ancova_model, new_chick)
new_chick <- data.frame(Time = 12, Diet = '3')
predict(ancova_model, new_chick)
ChickWeight %>%
ggplot(aes(Diet, weight)) +
geom_boxplot(fill='brown4', alpha = .666)
ChickWeight %>%
ggplot(aes(Diet, weight)) +
geom_boxplot(fill='brown4', alpha = .666)
ChickWeight %>%
ggplot(aes(Time, weight, col = Diet)) +
geom_point() +
geom_abline(slope = 8.7505, intercept = 10.9244, col = "brown1") +
geom_abline(slope = 8.7505, intercept = 27.0905, col = "darkgreen") +
geom_abline(slope = 8.7505, intercept = 47.4238, col = "cyan3") +
geom_abline(slope = 8.7505, intercept = 41.1579, col = "blueviolet")
mean(ChickWeight[ChickWeight$Time == 12,]$weight)
mean(ChickWeight[ChickWeight$Time == 12,]$weight)[1]
mean(ChickWeight[ChickWeight$Time == 12,]$weight) %>% .
mean(ChickWeight[ChickWeight$Time == 12,]$weight)
new_chick <- data.frame(Time = 12, Diet = '3')
predict(ancova_model, new_chick)
new_chick <- data.frame(Time = 12, Diet = '3')
predict(ancova_model, new_chick)
source(here::here("rmd_config.R"))
knitr::opts_chunk$set(echo = TRUE)
mean(ChickWeight[ChickWeight$Time == 12 & ChickWeight$Diet == '3',]$weight)
source(here::here("rmd_config.R"))
knitr::opts_chunk$set(echo = TRUE)
data("ChickWeight")
force(ChickWeight)
View(ChickWeight)
source(here::here("rmd_config.R"))
knitr::opts_chunk$set(echo = TRUE)
prev <- read.csv("C:/users/philg/desktop/mapreduceprev.txt")
View(prev)
prev <- read.csv("C:/users/philg/desktop/mapreduceprev.txt", sep = " ")
prev <- read.csv("C:/users/philg/desktop/mapreduceprev.txt", sep = " ", header = TRUE)
mapreduceprev <- read.delim("C:/Users/philg/Desktop/mapreduceprev.txt")
View(mapreduceprev)
mapreduceprev %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial") %>%
kable_styling(latex_options = "scale_down")
source(here::here("rmd_config.R"))
knitr::opts_chunk$set(echo = TRUE)
# Installing and loading libraries that will be used in this analysis
packages = c("kableExtra","lubridate", "gridExtra", "tree", "tidyverse", "here", "caret")
# Load the package or install and load it
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
mapreduceprev %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial") %>%
kable_styling(latex_options = "scale_down")
mapreduceprev %>% select(-Acorn) %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial") %>%
kable_styling(latex_options = "scale_down")
prev <- read.csv("C:/users/philg/desktop/mapreduceprev.txt", sep = "tab", header = TRUE)
prev <- read.csv("C:/users/philg/desktop/mapreduceprev.txt", sep = "\t", header = TRUE)
View(prev)
prev %>% select(-Acorn) %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial") %>%
kable_styling(latex_options = "scale_down")
